package com.biit.infographic.rest.api;

import com.biit.infographic.core.controllers.GeneratedInfographicController;
import com.biit.infographic.core.generators.PngGenerator;
import com.biit.infographic.core.models.GeneratedInfographicAsPngDTO;
import com.biit.infographic.core.models.svg.SvgTemplate;
import com.biit.infographic.core.pdf.PdfController;
import com.biit.infographic.rest.api.model.InfographicSearch;
import com.biit.server.exceptions.NotFoundException;
import com.biit.server.rest.CustomHeaders;
import com.biit.server.rest.SecurityService;
import com.biit.server.utils.exceptions.EmptyPdfBodyException;
import com.biit.server.utils.exceptions.InvalidXmlElementException;
import com.biit.server.utils.zip.ZipContent;
import com.biit.server.utils.zip.ZipController;
import com.biit.usermanager.client.providers.UserManagerClient;
import com.biit.usermanager.dto.UserDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.http.ContentDisposition;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/png")
public class PngServices extends ImageServices {

    private final GeneratedInfographicController generatedInfographicController;

    private final ZipController zipController;

    private final PdfController pdfController;

    private final UserManagerClient userManagerClient;

    public PngServices(SecurityService securityService, GeneratedInfographicController generatedInfographicController,
                       ZipController zipController, PdfController pdfController, UserManagerClient userManagerClient) {
        super(securityService);
        this.generatedInfographicController = generatedInfographicController;
        this.zipController = zipController;
        this.pdfController = pdfController;
        this.userManagerClient = userManagerClient;
    }


    @PreAuthorize("hasAnyAuthority(@securityService.viewerPrivilege, @securityService.editorPrivilege, @securityService.adminPrivilege)")
    @Operation(summary = "Generates a PNG from a template", security = @SecurityRequirement(name = "bearerAuth"))
    @PostMapping(value = "/create", produces = {MediaType.APPLICATION_OCTET_STREAM_VALUE, MediaType.APPLICATION_JSON_VALUE},
            consumes = MediaType.APPLICATION_JSON_VALUE)
    public byte[] getAll(@RequestBody SvgTemplate svgTemplate, Authentication authentication, HttpServletResponse response,
                         HttpServletRequest request) {
        final byte[] bytes = PngGenerator.generate(svgTemplate);
        final ContentDisposition contentDisposition = ContentDisposition.builder("attachment")
                .filename("Infographic.png").build();
        response.setHeader(HttpHeaders.CONTENT_DISPOSITION, contentDisposition.toString());
        return bytes;
    }


    @Operation(summary = "Search results as PNG generated by drools.", description = """
            - page: the PNG page if the infographic is composed by multiples PNGs.
            Parameters:
            - form: the form name.
            - version: the form version.
            - createdBy: who has filled up the form. If no organization is selected by default is the authenticated user.
            - createdByExternalReference: who has filled up the form. Using an external reference for a 3rd party application.
            - organization: which organization the form belongs to.
            - unit: related to a team, department or any other group of users.
            - startDate: filtering forms from this day.
            - endDate: filtering facts to this day.
            - Locale from infographic is obtained from the 'Accept-Language' header or the locale obtained by the user who has send the form.
            - Timezone is obtained from 'X-Time-Zone' header.
            """,
            security = @SecurityRequirement(name = "bearerAuth"),
            parameters = {
                    @Parameter(in = ParameterIn.HEADER,
                            name = "Accept-Language",
                            description = "Language requested for the texts",
                            example = "en-EN",
                            schema = @Schema(type = "string"))})
    @PreAuthorize("hasAnyAuthority(@securityService.viewerPrivilege, @securityService.editorPrivilege, @securityService.adminPrivilege)")
    @ResponseStatus(value = HttpStatus.OK)
    @GetMapping(value = "/find/latest/{page}", produces = MediaType.APPLICATION_JSON_VALUE)
    public byte[] getLatest(
            @RequestHeader(name = CustomHeaders.TIMEZONE_HEADER, required = false) String timeZoneHeader,
            @Parameter(name = "page", required = false) @PathVariable(value = "page", required = false) Integer page,
            HttpServletRequest httpRequest,
            @Parameter(name = "form", required = false) @RequestParam(value = "form", required = false) String form,
            @Parameter(name = "version", required = false) @RequestParam(value = "version", required = false) Integer version,
            @Parameter(name = "createdBy", required = false) @RequestParam(value = "createdBy", required = false) String createdBy,
            @Parameter(name = "createdByExternalReference", required = false) @RequestParam(value = "createdByExternalReference", required = false)
            String externalReference,
            @Parameter(name = "organization", required = false) @RequestParam(value = "organization", required = false) String organization,
            @Parameter(name = "unit", required = false) @RequestParam(value = "unit", required = false) String unit,
            Authentication authentication, HttpServletRequest request) {

        if (createdBy == null && organization == null) {
            if (externalReference == null) {
                createdBy = authentication.getName();
            } else {
                final Optional<UserDTO> user = userManagerClient.findByExternalReference(externalReference);
                if (user.isPresent()) {
                    createdBy = user.get().getUsername();
                }
            }
        }

        if (page == null) {
            page = 0;
        }
        canBeDoneByDifferentUsers(createdBy, authentication);

        final GeneratedInfographicAsPngDTO generatedInfographicAsPngDTO = GeneratedInfographicAsPngDTO
                .from(generatedInfographicController.processLatest(form, version, organization, unit, createdBy, timeZoneHeader, request.getLocale()));

        if (generatedInfographicAsPngDTO == null) {
            throw new NotFoundException(this.getClass(), "No infographic found!");
        }

        if (page >= generatedInfographicAsPngDTO.getContents().size()) {
            throw new NotFoundException(this.getClass(), "No page '" + page + "' exists. Maximum available pages are "
                    + generatedInfographicAsPngDTO.getContents().size() + ".");
        }

        return generatedInfographicAsPngDTO.getContents().get(page);
    }


    @Operation(summary = "Search results as PNG generated by drools.", description = """
            - page: the PNG page if the infographic is composed by multiples PNGs.
            Parameters:
            - form: the form name.
            - version: the form version.
            - createdBy: who has filled up the form. If no organization is selected by default is the authenticated user.
            - organization: which organization the form belongs to.
            - unit: related to a team, department or any other group of users.
            - startDate: filtering forms from this day.
            - endDate: filtering facts to this day.
            - Locale from infographic is obtained from the 'Accept-Language' header or the locale obtained by the user who has send the form.
            - Timezone is obtained from 'X-Time-Zone' header.
            """,
            security = @SecurityRequirement(name = "bearerAuth"),
            parameters = {
                    @Parameter(in = ParameterIn.HEADER,
                            name = "Accept-Language",
                            description = "Language requested for the texts",
                            example = "en-EN",
                            schema = @Schema(type = "string"))})
    @PreAuthorize("hasAnyAuthority(@securityService.viewerPrivilege, @securityService.editorPrivilege, @securityService.adminPrivilege)")
    @ResponseStatus(value = HttpStatus.OK)
    @GetMapping(value = "/find/latest/zip", produces = MediaType.APPLICATION_JSON_VALUE)
    public byte[] getLatestAsZip(
            @RequestHeader(name = CustomHeaders.TIMEZONE_HEADER, required = false) String timeZoneHeader,
            @Parameter(name = "form", required = false) @RequestParam(value = "form", required = false) String form,
            @Parameter(name = "version", required = false) @RequestParam(value = "version", required = false) Integer version,
            @Parameter(name = "createdBy", required = false) @RequestParam(value = "createdBy", required = false) String createdBy,
            @Parameter(name = "organization", required = false) @RequestParam(value = "organization", required = false) String organization,
            @Parameter(name = "unit", required = false) @RequestParam(value = "unit", required = false) String unit,
            Authentication authentication, HttpServletRequest request, HttpServletResponse response) throws IOException {
        if (createdBy == null && organization == null) {
            createdBy = authentication.getName();
        }
        canBeDoneByDifferentUsers(createdBy, authentication);

        final GeneratedInfographicAsPngDTO generatedInfographicAsPngDTO = GeneratedInfographicAsPngDTO
                .from(generatedInfographicController.processLatest(form, version, organization, unit, createdBy, timeZoneHeader, request.getLocale()));

        if (generatedInfographicAsPngDTO == null) {
            throw new NotFoundException(this.getClass(), "No infographic found!");
        }

        final List<ZipContent> content = new ArrayList<>();
        int page = 1;
        for (byte[] image : generatedInfographicAsPngDTO.getContents()) {
            content.add(new ZipContent("Page_" + page, "png", image));
            page++;
        }
        final byte[] bytes = zipController.createZipData(content);
        final ContentDisposition contentDisposition = ContentDisposition.builder("attachment")
                .filename((form != null ? form : "infographic") + ".zip").build();
        response.setHeader(HttpHeaders.CONTENT_DISPOSITION, contentDisposition.toString());
        return bytes;
    }


    @Operation(summary = "Search results as PNG generated by drools.", description = """
            Parameters:
            - form: the form name.
            - version: the form version.
            - createdBy: who has filled up the form. If no organization is selected by default is the authenticated user.
            - organization: which organization the form belongs to.
            - unit: related to a team, department or any other group of users.
            - startDate: filtering forms from this day.
            - endDate: filtering facts to this day.
            - Locale from infographic is obtained from the 'Accept-Language' header or the locale obtained by the user who has send the form.
            - Timezone is obtained from 'X-Time-Zone' header.
            """,
            security = @SecurityRequirement(name = "bearerAuth"),
            parameters = {
                    @Parameter(in = ParameterIn.HEADER,
                            name = "Accept-Language",
                            description = "Language requested for the texts",
                            example = "en-EN",
                            schema = @Schema(type = "string"))})
    @PreAuthorize("hasAnyAuthority(@securityService.viewerPrivilege, @securityService.editorPrivilege, @securityService.adminPrivilege)")
    @ResponseStatus(value = HttpStatus.OK)
    @GetMapping(value = "/find/latest/pdf", produces = {MediaType.APPLICATION_PDF_VALUE, MediaType.APPLICATION_JSON_VALUE})
    public byte[] getLatestAsPdf(
            @RequestHeader(name = CustomHeaders.TIMEZONE_HEADER, required = false) String timeZoneHeader,
            @Parameter(name = "form", required = false) @RequestParam(value = "form", required = false) String form,
            @Parameter(name = "version", required = false) @RequestParam(value = "version", required = false) Integer version,
            @Parameter(name = "createdBy", required = false) @RequestParam(value = "createdBy", required = false) String createdBy,
            @Parameter(name = "organization", required = false) @RequestParam(value = "organization", required = false) String organization,
            @Parameter(name = "unit", required = false) @RequestParam(value = "unit", required = false) String unit,
            Authentication authentication, HttpServletRequest request, HttpServletResponse response) throws InvalidXmlElementException,
            EmptyPdfBodyException {
        if (createdBy == null && organization == null) {
            createdBy = authentication.getName();
        }
        canBeDoneByDifferentUsers(createdBy, authentication);

        final GeneratedInfographicAsPngDTO generatedInfographicAsPngDTO = GeneratedInfographicAsPngDTO
                .from(generatedInfographicController.processLatest(form, version, organization, unit, createdBy, timeZoneHeader, request.getLocale()));

        if (generatedInfographicAsPngDTO == null) {
            throw new NotFoundException(this.getClass(), "No infographic found!");
        }

        final byte[] bytes = pdfController.generatePdfFromImage(generatedInfographicAsPngDTO.getContents());
        final ContentDisposition contentDisposition = ContentDisposition.builder("attachment")
                .filename((form != null ? form : "infographic") + ".pdf").build();
        response.setHeader(HttpHeaders.CONTENT_DISPOSITION, contentDisposition.toString());
        return bytes;
    }


    @Operation(summary = "Search results as a PDF generated by drools.", description = """
            Received a list of infographics, and the system puts together as one PDF document.
            Only the last version from each infographic is returned.
            - Locale from infographic is obtained from the 'Accept-Language' header or the locale obtained by the user who has send the form.
            - Timezone is obtained from 'X-Time-Zone' header.
            """,
            security = @SecurityRequirement(name = "bearerAuth"),
            parameters = {
                    @Parameter(in = ParameterIn.HEADER,
                            name = "Accept-Language",
                            description = "Language requested for the texts",
                            example = "en-EN",
                            schema = @Schema(type = "string"))})
    @PreAuthorize("hasAnyAuthority(@securityService.viewerPrivilege, @securityService.editorPrivilege, @securityService.adminPrivilege)")
    @ResponseStatus(value = HttpStatus.OK)
    @PostMapping(value = "/find/latest/pdf", produces = {MediaType.APPLICATION_PDF_VALUE, MediaType.APPLICATION_JSON_VALUE})
    public byte[] getAsPdf(
            @RequestHeader(name = CustomHeaders.TIMEZONE_HEADER, required = false) String timeZoneHeader,
            @RequestBody List<InfographicSearch> infographicSearchs,
            Authentication authentication, HttpServletRequest request, HttpServletResponse response)
            throws InvalidXmlElementException, EmptyPdfBodyException {

        final ArrayList<byte[]> pngBitmaps = new ArrayList<>();

        for (InfographicSearch infographicSearch : infographicSearchs) {
            canBeDoneByDifferentUsers(infographicSearch.getCreatedBy(), authentication);
            final GeneratedInfographicAsPngDTO generatedInfographicAsPngDTO = GeneratedInfographicAsPngDTO
                    .from(generatedInfographicController
                            .processLatest(infographicSearch.getForm(), infographicSearch.getVersion(),
                                    infographicSearch.getOrganization(), infographicSearch.getUnit(),
                                    infographicSearch.getCreatedBy(), timeZoneHeader, request.getLocale()));

            pngBitmaps.addAll(generatedInfographicAsPngDTO.getContents());
        }

        if (pngBitmaps.isEmpty()) {
            throw new NotFoundException(this.getClass(), "No infographics found!");
        }

        final byte[] bytes = pdfController.generatePdfFromImage(pngBitmaps);
        final ContentDisposition contentDisposition = ContentDisposition.builder("attachment")
                .filename("infographic.pdf").build();
        response.setHeader(HttpHeaders.CONTENT_DISPOSITION, contentDisposition.toString());
        return bytes;
    }
}
